{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Caterer - Data Generator","text":""},{"location":"#overview","title":"Overview","text":"<p>Ability to generate production like data based on any source/target system whether it be a CSV file, database table, etc. Just define your data source connections and data will be generated. It can also be manually altered to produce data or scenarios the way you want.</p> <p></p>"},{"location":"#generate-data","title":"Generate data","text":""},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#docker","title":"Docker","text":"<ol> <li><code>docker run -v /tmp:/opt/app/data-caterer pflookyy/data-caterer-basic:0.1</code></li> <li>Check <code>/tmp</code> folder for generated JSON data</li> </ol>"},{"location":"#manually-create-plan-and-tasks","title":"Manually create Plan and Task(s)","text":"<ol> <li>Create plan like here</li> <li>Create tasks like here</li> <li>Create application configuration like here</li> <li>Run via docker <code>docker run -e PLAN_FILE_PATH= -e TASK_FOLDER_PATH= pflookyy/data-caterer-basic:0.1</code></li> </ol>"},{"location":"tech/advanced/","title":"Advanced use cases","text":""},{"location":"tech/advanced/#special-data-formats","title":"Special data formats","text":"<p>There are many options available for you to use when you have a scenario when data has to be a certain format.</p> <ol> <li>Create expression datafaker</li> <li>Can be used to create names, addresses, or anything that can be found       under here</li> <li>Create regex</li> </ol>"},{"location":"tech/advanced/#foreign-keys-across-data-sets","title":"Foreign keys across data sets","text":"<p>If you have a use case where you require a columns value to match in another data set, this can be achieved in the plan definition. For example, if I have the column <code>account_number</code> in a data source named <code>customer-postgres</code> and column <code>account_id</code> in <code>transaction-cassandra</code>,</p> <pre><code>sinkOptions:\n  foreignKeys:\n    #The foreign key name with naming convention [dataSourceName].[taskName].[columnName]\n    \"customer-postgres.accounts.account_number\":\n      #List of columns to match with same naming convention\n      - \"transaction-cassandra.transactions.account_id\"\n</code></pre> <p>Sample can be found here. You can define any number of foreign key relationships as you want.</p>"},{"location":"tech/advanced/#edge-cases","title":"Edge cases","text":"<p>For each given data type, there are edge cases which can cause issues when your application processes the data. This can be controlled at a column level by including the following flag in the generator options:</p> <pre><code>fields:\n  - name: \"amount\"\n    type: \"double\"\n    generator:\n      type: \"random\"\n      options:\n        enableEdgeCases: \"true\" \n</code></pre> <p>If you want to know all the possible edge cases for each data type, can check the documentation here.</p>"},{"location":"tech/advanced/#scenario-testing","title":"Scenario testing","text":"<p>You can create specific scenarios by adjusting the metadata found in the plan and tasks to your liking. For example, if you had two data sources, a Postgres database and a parquet file, and you wanted to save account data into Postgres and transactions related to those accounts into a parquet file. You can alter the <code>status</code> column in the account data to only generate <code>open</code> accounts and define a foreign key between Postgres and parquet to ensure the same <code>account_id</code> is being used. Then in the parquet task, define 1 to 10 transactions per <code>account_id</code> to be generated.</p> <p>Postgres account generation example task Parquet transaction generation example task Plan</p>"},{"location":"tech/advanced/#generating-json-data","title":"Generating JSON data","text":""},{"location":"tech/connections/","title":"Data Source Connections","text":""},{"location":"tech/connections/#contents","title":"Contents","text":"<ul> <li>Supported Data Connections</li> <li>File System</li> <li>JDBC<ul> <li>Postgres</li> <li>MySQL</li> </ul> </li> <li>Cassandra</li> <li>JMS</li> <li>HTTP</li> </ul> <p>Details of all the connection configuration supported can be found in the below subsections for each type of connection.</p>"},{"location":"tech/connections/#supported-data-connections","title":"Supported Data Connections","text":"<ul> <li>S3</li> <li>Postgres</li> <li>MySQL</li> <li>Cassandra</li> <li>Solace</li> <li>HTTP</li> </ul> <p>All connection details follow the same pattern.</p> <pre><code>&lt;connection format&gt; {\n    &lt;connection name&gt; {\n        &lt;key&gt; = &lt;value&gt;\n    }\n}\n</code></pre> <p>When defining a configuration value that can be defined by a system property or environment variable at runtime, you can define that via the following:</p> <pre><code>url = \"localhost\"\nurl = ${?POSTGRES_URL}\n</code></pre> <p>The above defines that if there is a system property or environment variable named <code>POSTGRES_URL</code>, then that value will be used for the <code>url</code>, otherwise, it will default to <code>localhost</code>.</p>"},{"location":"tech/connections/#file-system","title":"File System","text":""},{"location":"tech/connections/#jdbc","title":"JDBC","text":"<p>Follows the same configuration used by Spark as found here. Sample can be found below</p> <pre><code>jdbc {\n    postgres {\n        url = \"jdbc:postgresql://localhost:5432/customer\"\n        url = ${?POSTGRES_URL}\n        user = \"postgres\"\n        user = ${?POSTGRES_USERNAME}\n        password = \"postgres\"\n        password = ${?POSTGRES_PASSWORD}\n        driver = \"org.postgresql.Driver\"\n    }\n}\n</code></pre> <p>Ensure that the user has write permission so it is able to save the table to the target tables.</p> <pre><code>GRANT INSERT ON &lt;schema&gt;.&lt;table&gt; TO &lt;user&gt;;\n</code></pre>"},{"location":"tech/connections/#postgres","title":"Postgres","text":""},{"location":"tech/connections/#permissions","title":"Permissions","text":"<p>Following permissions are required when generating plan and tasks:</p> <pre><code>GRANT SELECT ON information_schema.tables TO &lt;user&gt;;\nGRANT SELECT ON information_schema.columns TO &lt;user&gt;;\nGRANT SELECT ON information_schema.key_column_usage TO &lt;user&gt;;\nGRANT SELECT ON information_schema.table_constraints TO &lt;user&gt;;\nGRANT SELECT ON information_schema.constraint_column_usage TO &lt;user&gt;;\n</code></pre>"},{"location":"tech/connections/#mysql","title":"MySQL","text":""},{"location":"tech/connections/#permissions_1","title":"Permissions","text":"<p>Following permissions are required when generating plan and tasks:</p> <pre><code>GRANT SELECT ON information_schema.columns TO &lt;user&gt;;\nGRANT SELECT ON information_schema.statistics TO &lt;user&gt;;\nGRANT SELECT ON information_schema.key_column_usage TO &lt;user&gt;;\n</code></pre>"},{"location":"tech/connections/#cassandra","title":"Cassandra","text":"<p>Follows same configuration as defined by the Spark Cassandra Connector as found here </p> <pre><code>org.apache.spark.sql.cassandra {\n    cassandra {\n        spark.cassandra.connection.host = \"localhost\"\n        spark.cassandra.connection.host = ${?CASSANDRA_HOST}\n        spark.cassandra.connection.port = \"9042\"\n        spark.cassandra.connection.port = ${?CASSANDRA_PORT}\n        spark.cassandra.auth.username = \"cassandra\"\n        spark.cassandra.auth.username = ${?CASSANDRA_USERNAME}\n        spark.cassandra.auth.password = \"cassandra\"\n        spark.cassandra.auth.password = ${?CASSANDRA_PASSWORD}\n    }\n}\n</code></pre> <p>Ensure that the user has write permission so it is able to save the table to the target tables.</p> <pre><code>GRANT INSERT ON &lt;schema&gt;.&lt;table&gt; TO &lt;user&gt;;\n</code></pre>"},{"location":"tech/connections/#jms","title":"JMS","text":"<p>Uses JNDI lookup to send messages to JMS queue. Ensure that the messaging system you are using has your queue/topic registered  via JNDI otherwise a connection cannot be created.</p> <pre><code>jms {\n    solace {\n        initialContextFactory = \"com.solacesystems.jndi.SolJNDIInitialContextFactory\"\n        connectionFactory = \"/jms/cf/default\"\n        url = \"smf://localhost:55555\"\n        vpnName = \"default\"\n        user = \"admin\"\n        password = \"admin\"  \n    }\n}\n</code></pre>"},{"location":"tech/connections/#http","title":"HTTP","text":"<p>Define a URL to connect to when sending HTTP requests. Later, can have the ability to define generated data as part of the URL.</p> <pre><code>http {\n    customer_api {\n        url = \"http://localhost:80/get\"\n        user = \"admin\"      #optional\n        password = \"admin\"  #optional\n    }\n}\n</code></pre>"},{"location":"tech/docker/","title":"Docker","text":""},{"location":"tech/docker/#quick-start","title":"Quick start","text":"<ol> <li><code>mkdir /tmp/datagen</code></li> <li><code>docker run -v /tmp/datagen:/opt/app/data-caterer pflookyy/data-caterer:0.1</code></li> <li><code>head /tmp/datagen/sample/json/account-gen/part-0000*</code></li> </ol>"},{"location":"tech/docker/#run-with-custom-data-connections","title":"Run with custom data connections","text":"<ol> <li>Use sample <code>application.conf</code> from here and put under folder <code>/tmp/datagen</code></li> <li><code>cp app/src/main/resources/application.conf /tmp/datagen</code></li> <li>Fill in details of data connections as found here</li> <li><code>docker run -v /tmp/datagen:/opt/app/data-caterer -e APPLICATION_CONFIG_PATH=/opt/app/datagen/application.conf pflookyy/data-caterer:0.1</code></li> </ol>"},{"location":"tech/generators/","title":"Data Generators","text":""},{"location":"tech/generators/#data-types","title":"Data Types","text":"<p>Below is a list of all supported data types for generating data:</p> Data Type Spark Data Type Options Description string StringType minLen, maxLen, expression, enableNull integer IntegerType min, minValue, max, maxValue long LongType min, minValue, max, maxValue short ShortType min, minValue, max, maxValue decimal(precision, scale) DecimalType(precision, scale) min, minValue, max, maxValue double DoubleType min, minValue, max, maxValue float FloatType min, minValue, max, maxValue date DateType min, max, enableNull timestamp TimestampType min, max, enableNull boolean BooleanType binary BinaryType minLen, maxLen, enableNull byte ByteType array ArrayType listMinLen, listMaxLen _ StructType Implicitly supported when a schema is defined for a field"},{"location":"tech/generators/#options","title":"Options","text":""},{"location":"tech/generators/#all-data-types","title":"All data types","text":"<p>Some options are available to use for all types of data generators. Below is the list along with example and descriptions:</p> Option Default Example Description enableEdgeCases false enableEdgeCases: \"true\" Enable/disable generated data to contain edge cases based on the data type. For example, integer data type has edge cases of (Int.MaxValue, Int.MinValue and 0) isUnique false isUnique: \"true\" Enable/disable generated data to be unique for that column. Errors will be thrown when it is unable to generate unique data seed seed: \"1\" Defines the random seed for generating data for that particular column. It will override any seed defined at a global level sql sql: \"CASE WHEN amount &lt; 10 THEN true ELSE false END\" Define any SQL statement for generating that columns value. Computation occurs after all non-SQL fields are generated. This means any columns used in the SQL cannot be based on other SQL generated columns. Data type of generated value from SQL needs to match data type defined for the field"},{"location":"tech/generators/#string","title":"String","text":"Option Default Example Description minLen 1 minLen: \"2\" Ensures that all generated strings have at least length <code>minLen</code> maxLen 10 maxLen: \"15\" Ensures that all generated strings have at most length <code>maxLen</code> expression expression: \"#{Name.name}\" expression:\"#{Address.city}/#{Demographic.maritalStatus}\" Will generate a string based on the faker expression provided. All possible faker expressions can be found here Expression has to be in format <code>#{&lt;faker expression name&gt;}</code> enableNull false enableNull: \"true\" Enable/disable null values being generated <p>Edge cases: (\"\", \"\\n\", \"\\r\", \"\\t\", \" \", \"\\u0000\", \"\\ufff\")</p>"},{"location":"tech/generators/#numeric","title":"Numeric","text":"<p>For all the numeric data types, there are 4 options to choose from: min, minValue, max and maxValue. Generally speaking, you only need to define one of min or minValue, similarly with max or maxValue. The reason why there are 2 options for each is because of when metadata is automatically gathered, we gather the statistics of the observed min and max values. Also, it will attempt to gather any restriction on the min or max value as defined by the data source (i.e. max value as per database type).</p>"},{"location":"tech/generators/#integerlongshortdecimal","title":"Integer/Long/Short/Decimal","text":"Option Default Example Description minValue 0 minValue: \"2\" Ensures that all generated values are greater than or equal to <code>minValue</code> min 0 min: \"2\" Ensures that all generated values are greater than or equal to <code>min</code>. If <code>minValue</code> is defined, <code>minValue</code> will define the lowest possible generated value maxValue 1000 maxValue: \"25\" Ensures that all generated values are less than or equal to <code>maxValue</code> max 1000 max: \"25\" Ensures that all generated values are less than or equal to <code>maxValue</code>. If <code>maxValue</code> is defined, <code>maxValue</code> will define the largest possible generated value <p>Edge cases Integer: (2147483647, -2147483648, 0) Edge cases Long/Decimal: (9223372036854775807, -9223372036854775808, 0) Edge cases Short: (32767, -32768, 0)</p>"},{"location":"tech/generators/#doublefloat","title":"Double/Float","text":"Option Default Example Description minValue 0.0 minValue: \"2.1\" Ensures that all generated values are greater than or equal to <code>minValue</code> min 0.0 min: \"2.1\" Ensures that all generated values are greater than or equal to <code>min</code>. If <code>minValue</code> is defined, <code>minValue</code> will define the lowest possible generated value maxValue 1000.0 maxValue: \"25.9\" Ensures that all generated values are less than or equal to <code>maxValue</code> max 1000.0 max: \"25.9\" Ensures that all generated values are less than or equal to <code>maxValue</code>. If <code>maxValue</code> is defined, <code>maxValue</code> will define the largest possible generated value <p>Edge cases Double: (+infinity, 1.7976931348623157e+308, 4.9e-324, 0.0, -0.0, -1.7976931348623157e+308, -infinity, NaN) Edge cases Float: (+infinity, 3.4028235e+38, 1.4e-45, 0.0, -0.0, -3.4028235e+38, -infinity, NaN)</p>"},{"location":"tech/generators/#date","title":"Date","text":"Option Default Example Description min now() - 365 days min: \"2023-01-31\" Ensures that all generated values are greater than or equal to <code>min</code> max now() max: \"2023-12-31\" Ensures that all generated values are less than or equal to <code>max</code> enableNull false enableNull: \"true\" Enable/disable null values being generated <p>Edge cases: (0001-01-01, 1582-10-15, 1970-01-01, 9999-12-31) ( Reference: https://github.com/apache/spark/blob/master/sql/catalyst/src/test/scala/org/apache/spark/sql/RandomDataGenerator.scala#L206)</p>"},{"location":"tech/generators/#timestamp","title":"Timestamp","text":"Option Default Example Description min now() - 365 days min: \"2023-01-31 23:10:10\" Ensures that all generated values are greater than or equal to <code>min</code> max now() max: \"2023-12-31 23:10:10\" Ensures that all generated values are less than or equal to <code>max</code> enableNull false enableNull: \"true\" Enable/disable null values being generated <p>Edge cases: (0001-01-01 00:00:00, 1582-10-15 23:59:59, 1970-01-01 00:00:00, 9999-12-31 23:59:59)</p>"},{"location":"tech/generators/#binary","title":"Binary","text":"Option Default Example Description minLen 1 minLen: \"2\" Ensures that all generated array of bytes have at least length <code>minLen</code> maxLen 20 maxLen: \"15\" Ensures that all generated array of bytes have at most length <code>maxLen</code> enableNull false enableNull: \"true\" Enable/disable null values being generated <p>Edge cases: (\"\", \"\\n\", \"\\r\", \"\\t\", \" \", \"\\u0000\", \"\\ufff\", -128, 127)</p>"},{"location":"tech/generators/#list","title":"List","text":"Option Default Example Description listMinLen 0 listMinLen: \"2\" Ensures that all generated lists have at least length <code>listMinLen</code> listMaxLen 5 listMaxLen: \"15\" Ensures that all generated lists have at most length <code>listMaxLen</code> enableNull false enableNull: \"true\" Enable/disable null values being generated"}]}